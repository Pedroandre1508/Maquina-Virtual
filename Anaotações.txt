Plano de Implementação

1. Análise Semântica em Tempo de Compilação
Definir a Tabela de Símbolos:

A tabela de símbolos (ATabelaSimbolos) deve armazenar informações sobre variáveis, constantes e seus tipos.
Implementar a Análise Semântica:

No LanguageParser, implemente métodos para verificar se as operações são semanticamente corretas.
Verifique tipos de variáveis, inicializações, e outras regras semânticas.
Gerar Instruções:

Após a análise semântica, gere as instruções correspondentes e armazene-as na tabela de instruções (ATabelaInstrucoes).
2. Validação em Tempo de Execução
Criar a Classe MaquinaVirtual:

Esta classe será responsável por executar as instruções e realizar validações em tempo de execução.
Adicione métodos para executar cada tipo de instrução (ADD, ALB, ALI, etc.).
Adicionar Métodos de Validação:

Adicione métodos na MaquinaVirtual para validar tipos e valores durante a execução.
Exibir Resultados:

Adicione um método para exibir o estado da pilha ou outras informações relevantes após a execução das instruções.
3. Integração com a Interface Gráfica
Adicionar Função de Execução no LanguageParser:

Adicione uma função no LanguageParser para executar as instruções e retornar os resultados.
Chamar a Função de Execução no Controller.java:

No Controller.java, chame a função de execução do LanguageParser e exiba os resultados na interface gráfica.


----------------------------------------------------------------
TESTES GERADOS

make programa

const int: a = 10. real: b = 20. end;
var int: x, y. real: z. end;
put(x, y, z).
end.


---------------
make programa

const int: a = 10. real: b = 20. end;
var int: x, y. real: z. end;

while a > 5 do
    if b < 15 then
        put(x).
    else
        put(y).
    end.
    .a -> x.
end.
.
end.

------------------

make programa

const int: a = 10. real: b = 20. end;
var int: x, y. real: z. end;

if a > 5 then
    if b < 15 then
        put(x).
    else
        put(y).
    end.
.
else
    put(z).
end.
.
end.